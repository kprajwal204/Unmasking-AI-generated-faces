# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oM0F_xm1p0jaBtSLy--aWBjjlSVo6s31
"""

import gradio as gr
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image

# Load the saved models from the specified paths
cnn_model = tf.keras.models.load_model("cnn_model.h5")
inception_model = tf.keras.models.load_model("inception_model_trained.h5")
vgg16_model = tf.keras.models.load_model("vgg16_model_trained.h5")
xception_model = tf.keras.models.load_model("xception_model_trained.h5")

# Define image preprocessing function
def preprocess_image(image_path):
    # Load and preprocess the image
    img = image.load_img(image_path, target_size=(128, 128))  # Ensure this size matches your model input size
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    img_array /= 255.0  # Normalize the image
    return img_array

# Function to predict based on selected model
def predict_image(model_choice, image_path):
    img_array = preprocess_image(image_path)

    # Make predictions based on the selected model
    if model_choice == "CNN":
        prediction = cnn_model.predict(img_array)
    elif model_choice == "InceptionV3":
        prediction = inception_model.predict(img_array)
    elif model_choice == "VGG16":
        prediction = vgg16_model.predict(img_array)
    elif model_choice == "Xception":
        prediction = xception_model.predict(img_array)

    # Return the result (prediction > 0.5 means AI-generated, else Real)
    return "AI-generated" if prediction[0] > 0.5 else "Real"

# Create the Gradio interface
def gradio_interface():
    # Create a dropdown to select model
    model_choice = gr.Dropdown(choices=["CNN", "InceptionV3", "VGG16", "Xception"], label="Select Model")

    # Create an image input for user to upload an image, use webcam, or provide a link
    image_input = gr.Image(type="filepath", label="Upload Image / Take Photo / Paste Link")

    # Create the Gradio output (classification result)
    output = gr.Textbox(label="Prediction")

    # Set up the Gradio interface
    interface = gr.Interface(
        fn=predict_image,
        inputs=[model_choice, image_input],
        outputs=output,
        title="Real vs AI-Generated Image Detection",
        description="Upload an image, take a photo with your webcam, or paste a link to detect if the image is real or AI-generated."
    )

    # Launch the interface with a public link for 72 hours
    interface.launch(share=True)  # This will generate a public link for 72 hours




